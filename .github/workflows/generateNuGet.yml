name: Generate NuGet Packages

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      apps:
        description: Comma separated list of apps (leave empty to use APPS secret)
        required: false
        default: ''
      nuGetServerUrl:
        description: NuGet server URL (leave empty to use NUGETSERVERURL secret)
        required: false
        default: ''
      nuGetToken:
        description: NuGet auth token (leave empty to use NUGETTOKEN secret)
        required: false
        default: ''

jobs:
  GenerateNuGetPackages:
    name: Generate NuGet Packages
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Mask input
        shell: pwsh
        run: |
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch') {
            $eventPath = Get-Content -Encoding UTF8 -Path $env:GITHUB_EVENT_PATH -Raw | ConvertFrom-Json
            if ($null -ne $eventPath.inputs) {
              $eventPath.inputs.psObject.Properties | Where-Object { @('Apps','Dependencies','NuGetServerUrl','NuGetToken') -contains $_.Name } | ForEach-Object {
                $property = $_.Name
                $value = $eventPath.inputs."$property"
                Write-Host "::add-mask::$value"
              }
            }
          }
        
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate NuGet Packages
        shell: pwsh
        env:
          nuGetToken: ${{ github.event.inputs.nuGetToken != '' && github.event.inputs.nuGetToken || secrets.NUGETTOKEN }}
          nuGetServerUrl: ${{ github.event.inputs.nuGetServerUrl != '' && github.event.inputs.nuGetServerUrl || secrets.NUGETSERVERURL }}
          apps: ${{ github.event.inputs.apps != '' && github.event.inputs.apps || secrets.APPS }}
        run: |
          . (Join-Path $env:GITHUB_WORKSPACE "GenerateNuGetPackages.ps1")
